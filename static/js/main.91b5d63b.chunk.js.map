{"version":3,"sources":["content/Content.jsx","header/Header.jsx","about/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Content","className","style","display","justifyContent","src","alt","Header","useEffect","href","to","icon","faPython","faGithub","About","props","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAmCeA,MAhCf,WACE,OACE,0BAAMC,UAAU,WAEd,mDAEA,4OAKA,yQAOA,6BACA,iDAjBF,sJAsBE,6BAASC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,iBACjD,yBAAKC,IAAI,uCAAuCC,IAAI,SACpD,yBAAKD,IAAI,sCAAsCC,IAAI,Y,uBCK5CC,MA3Bf,WAGE,OAFAC,qBAAU,cAAU,IAGlB,6BAASP,UAAU,UACjB,uBAAGQ,KAAK,KAAR,8BAEA,iCACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,SACA,6BAAST,UAAU,YACjB,4BAAQA,UAAU,WAAlB,YACA,6BAASA,UAAU,oBACjB,uBAAGQ,KAAK,QACN,kBAAC,IAAD,CAAiBE,KAAMC,MADzB,+CAIA,uBAAGH,KAAK,SACN,kBAAC,IAAD,CAAiBE,KAAME,MADzB,8B,MCQGC,MA5Bf,SAAeC,GACb,OACE,6BAASd,UAAU,SACjB,2CAEA,qIAEmC,IACjC,kBAAC,IAAD,CAAMS,GAAG,gCAAT,wCAHF,KASA,qPAMA,8GCGSM,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,0BAAMA,UAAU,WACd,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWL,SCL9BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91b5d63b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Content.css\";\r\n\r\nfunction Content(...props) {\r\n  return (\r\n    <main className=\"content\">\r\n      {/* Titulo parcial */}\r\n      <h2>Lorem, ipsum dolor.</h2>\r\n      {/* Texto temporário */}\r\n      <p>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit quos\r\n        tempora porro deleniti facilis dicta esse at vitae nostrum cumque\r\n        debitis incidunt enim quo facere, repellendus fuga aut minus eligendi?\r\n      </p>\r\n      <p>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Laboriosam\r\n        dicta iusto laudantium, rerum iste nisi autem. Aut est quidem repellat\r\n        architecto ex voluptatum corporis nemo, aspernatur necessitatibus,\r\n        voluptates, quae similique.\r\n      </p>\r\n      {/* Separador */}\r\n      <hr />\r\n      <h2>Mais texto lorem.</h2>\r\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque voluptatum\r\n      tenetur voluptatem neque nihil, laborum deserunt quas illum ut! Officia?\r\n\r\n      {/* CSS inline é coisa feia, talvez criar uma class css com essas regras seja mais bonito */}\r\n      <section style={{ display: \"flex\", justifyContent: \"space-evenly\" }}>\r\n        <img src=\"https://picsum.photos/id/237/400/300\" alt=\"Mock\" />\r\n        <img src=\"https://picsum.photos/id/69/400/300\" alt=\"Mock\" />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import React, { useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport \"./Header.css\";\r\nimport { faGithub, faPython } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header(...props) {\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <section className=\"header\">\r\n      <a href=\"/\">TCC | Fabiana Gomes | UFCG</a>\r\n\r\n      <section>\r\n        <Link to=\"/sobre\">Sobre</Link>\r\n        <section className=\"dropdown\">\r\n          <button className=\"dropbtn\">Recursos</button>\r\n          <section className=\"dropdown-content\">\r\n            <a href=\"#alo\">\r\n              <FontAwesomeIcon icon={faPython} />&nbsp;\r\n              Manipulação de dados com jupyter\r\n            </a>\r\n            <a href=\"#amor\">\r\n              <FontAwesomeIcon icon={faGithub} />&nbsp;\r\n              Artefatos Github\r\n            </a>\r\n          </section>\r\n        </section>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction About(props) {\r\n  return (\r\n    <section className=\"about\">\r\n      <h2>Sobre o TCC</h2>\r\n\r\n      <p>\r\n        Isso, aquilo e aquilo outro, motivaram a pesquisa que busca entender o\r\n        perfil do aluno que participa do{\" \"}\r\n        <Link to=\"http://www.ufcg.edu.br/~pvs/\">\r\n          PVS - Pré-Vestibular Solidário\r\n        </Link>\r\n        .\r\n      </p>\r\n\r\n      <p>\r\n        Para isso foi feito o acompanhamento dos alunos que participaram do\r\n        curso nos anos de 2018 e 2019. Mais de 200 alunos responderam os\r\n        formulários para que pudéssemos ter uma visão melhor do perfil do aluno.\r\n      </p>\r\n\r\n      <p>\r\n        Acho que vale a pena repetir algumas coisas que estão no documento do\r\n        TCC.\r\n      </p>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Content from \"./content/Content\";\r\nimport Header from \"./header/Header\";\r\n\r\nimport \"./App.css\";\r\nimport About from \"./about/About\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n\r\n        <Switch>\r\n          <main className=\"content\">\r\n            <Route exact path=\"/\" component={Content} />\r\n            <Route exact path=\"/sobre\" component={About} />\r\n          </main>\r\n        </Switch>\r\n        {/* <Footer /> */}\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}